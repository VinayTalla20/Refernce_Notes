kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.labels.beta\.kubernetes\.io/instance-type} {.metadata.labels.kubernetes\.io/hostname}{"\n"}{end}'

kubectl get nodes -o jsonpath='{.items[*].metadata.labels.beta\.kubernetes\.io/instance-type}'


Standard_D8s_v3     32GB   8vcpus     $280.32  aks-aarpnp-16471088-vmss00004w
Standard_DS2_v2      7GB    2vcpus    $106.58  aks-agentpool1-38336407-vmss0000a5
Standard_DS2_v2      7GB    2vcpus    $106.58  aks-agentpool1-38336407-vmss0000a6
Standard_D2as_v4     8GB    2vcpus    $70.08   aks-grafana-14132910-vmss00002g
Standard_DS2_v2      7GB    2vcpus    $106.58  aks-smartconxnp2-22634602-vmss0000hx
Standard_DS2_v2      7GB    2vcpus    $106.58  aks-smartconxnp2-22634602-vmss0000hy
Standard_DS2_v2      7GB    2vcpus    $106.58  aks-smartconxnp2-22634602-vmss0000hz
Standard_DS2_v2      7GB    2vcpus    $106.58  aks-smartconxnp2-22634602-vmss0000i0

Standard_D8s_v3 aks-aarpnp-16471088-vmss00004w
Standard_DS2_v2 aks-agentpool1-38336407-vmss0000a5
Standard_DS2_v2 aks-agentpool1-38336407-vmss0000a6
Standard_D2as_v4 aks-grafana-14132910-vmss00002g
Standard_DS2_v2 aks-smartconxnp2-22634602-vmss0000hx
Standard_DS2_v2 aks-smartconxnp2-22634602-vmss0000hy
Standard_DS2_v2 aks-smartconxnp2-22634602-vmss0000hz
Standard_DS2_v2 aks-smartconxnp2-22634602-vmss0000i0


az aks nodepool update --resource-group smartconx-dev-rg --cluster-name SmartConXDev-AKS --name aarpnp --labels app=smartconx --no-wait


spring init --build=maven -d="devtools,lombok,web" -j=17 --boot-version=3.3.0 --version=1.0 --name=sampleJavaProject --packaging=jar --packageName=com/italent/iconnector.sampleJavaProject --groupId=com.italent.iconnector.sampleJavaProject --artifactId=sampleJavaProject-service sampleJavaProject



package $packageName$.$serviceName$.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import $packageName$.$serviceName$.utils.LogTime;

@RestController
@CrossOrigin
public class ServiceAvailabilityValidationController {
	
	private static final Logger logger = LoggerFactory.getLogger(ServiceAvailabilityValidationController.class);
	/**
     * To check availability of service
     * 
     * @return
     */
    @GetMapping("/availability")
    @ResponseBody
    @LogTime
    public ResponseEntity<String> serverReachable() {
        logger.info("Request received to server reachable");
        HttpHeaders responseHeaders = new HttpHeaders();
        logger.info("$serviceName$ Service is alive");
        responseHeaders.setContentType(MediaType.APPLICATION_JSON);
        String response = "$serviceName$ Service is alive";
        return new ResponseEntity<>(response, responseHeaders, HttpStatus.OK);
    }

}
